# River Raid II for Dojo Boy
# Adapted by Zorglup from https://github.com/maurelioredfox/pimoroni-pico/blob/projects/micropython/examples/tufty2040/river_raid.py

import random

from dojoboy_v1 import DojoBoy

djb = DojoBoy(show_intro=True,width=160,height=128,framerate=30)

djb.free_mem()

WIDTH, HEIGHT = djb.display.width, djb.display.height # 160x128

BULLET_SPEED = 10
PLAYER_SPEED = 4 # Lateral Speed
MAP_SPEED = 2
BRIDGE_AFTER_X_BLOC = 16

BLOC_SIZE_W = WIDTH//16 # 160/16=10
BLOC_SIZE_H = HEIGHT//4 # 128/4=32

SPAWN_PROBABILITY = 10
POS_Y_JET = HEIGHT-28 # 28= Height Text 'Fuel'
OFFSET_CHECK_COLLISION = POS_Y_JET-(HEIGHT-BLOC_SIZE_H) # 100-(128-32)=4
POS_X_SCORE = WIDTH - 48
POS_X_FUEL = (WIDTH//2)-64
POS_Y_FUEL = HEIGHT - 8

'''
# Target : 0=None,1=Fuel,2=Boat,3=Helicopter,4=Helicopter-Shooter,5=Drone,6=Drone-Shooter,7=Tank,8=Balloon
# LEVEL : 16 x Terrain,Target,Tx,Ty
LEVELS = [[(2,0,0,0),(1,0,0,0),(0,0,0,0),(2,0,0,0),(2,0,0,0),(2,0,0,0),(2,0,0,0),(2,1,80,16),(1,1,80,16),(1,1,80,16),(1,1,80,16),(1,1,80,16),(0,2,80,16),(0,1,80,16),(0,1,80,16),(0,1,80,16)], \
          [(2,0,0,0),(2,2,80,16),(2,0,0,0),(0,3,80,16),(0,0,0,0),(0,2,80,16),(3,0,0,0),(3,0,0,0),(0,3,80,16),(0,8,80,16),(0,0,0,0),(0,0,0,0),(0,2,80,16),(0,0,0,0),(0,2,80,16),(0,0,0,0)], \
          [(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,8,80,16),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,8,80,16),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,8,80,16),(0,0,0,0)], \
          [(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,8,80,16),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,8,80,16),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,8,80,16),(0,0,0,0),(0,0,0,0),(0,0,0,0)]]
'''

TERRAINS = [0b00000011,0b00001111,0b00000111,0b11000011,0b00011111,0b00000111,0b11000011]

SHOOT_TABLE = [(0,0,1),(-2,1,1),(-4,1,1),(-6,0,1),(-8,1,1),(-10,3,1),(-12,5,3),(-14,7,4),(-16,9,5)]
BRIDGE_TERRAIN = 0b00111111
PRE_BRIDGE_TERRAIN = 0b00000111

jet_c = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(jet_c,14,14) # Sprite 0
del jet_c
jet_l = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(jet_l,14,14) # Sprite 1
del jet_l
jet_r = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(jet_r,14,14) # Sprite 2
del jet_r
boat_l = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xff\xff\xff\xff\xff\xff\xff\xff\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(boat_l,32,8) # Sprite 3
del boat_l
boat_r = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xd1\x86\xff\xff\xff\xff\xff\xff\xff\xffN;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;N;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(boat_r,32,8) # Sprite 4
del boat_r
heli = bytearray(b'\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xe0\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(heli,14,2)   # Sprite 5
del heli
heli_l = bytearray(b'\xff\xff\xff\xff3E3E3E3E3E3E\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3E3E3E3E3E3E3E3E3E3E\xff\xff\xff\xff\xff\xff\xff\xff3E3E2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T\xff\xff\xff\xff3E3E3E3E3E3E\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3E3E\xff\xff\xff\xff\xff\xff\xff\xff3E3E\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3E3E3E3E3E3E\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(heli_l,16,7) # Sprite 6
del heli_l
heli_r = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3E3E3E3E3E3E\xff\xff\xff\xff3E3E\xff\xff\xff\xff\xff\xff\xff\xff3E3E3E3E3E3E3E3E3E3E2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T2T3E3E\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3E3E3E3E3E3E\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3E3E\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3E3E3E3E3E3E\xff\xff\xff\xff')
djb.display.add_sprite(heli_r,16,7) # Sprite 7
del heli_r
fuel = bytearray(b'\x00\x00\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\xfbM\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
djb.display.add_sprite(fuel,16,32)  # Sprite 8
del fuel
plane_l = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff{v{v\xff\xff\xff\xff{v{v{v{v\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff{v{v{v{v4\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb4\xff\xff\xff\xff\xff\xff\xff\xff4\xb44\xb4\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x96\x18\x96\x18\x96\x18\x96\x18\x96\x18\x96\x18\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x96\x18\x96\x18\x96\x18\x96\x18\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(plane_l,16,6) # Sprite 9
del plane_l
plane_r = bytearray(b'{v{v\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff{v{v{v{v\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff{v{v{v{v\xff\xff\xff\xff4\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb4\xff\xff\xff\xff4\xb44\xb4\xff\xff\xff\xff\xff\xff\xff\xff4\xb44\xb44\xb44\xb44\xb44\xb44\xb44\xb4\xff\xff\xff\xff\xff\xff\xff\xff\x96\x18\x96\x18\x96\x18\x96\x18\x96\x18\x96\x18\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x96\x18\x96\x18\x96\x18\x96\x18\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(plane_r,16,6) # Sprite 10
del plane_r
bridge = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffq\xc3q\xc3q\xc3q\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffq\xc3q\xc3q\xc3q\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffq\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3\xd3\xe3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3q\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffq\xc3q\xc3q\xc3q\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffq\xc3q\xc3q\xc3q\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(bridge,40,14) # Sprite 11
del bridge
#road = bytearray(b'c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xff\xe0\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14\xa5\x14c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,')
#djb.display.add_sprite(road,16,16) # Sprite 12
#del road
djb.display.add_rect_sprite(14, 2, djb.display.WHITE_H) # Sprite 12

tank_l = bytearray(b'\x88\x02\x88\x02\x88\x02\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x88\x02\x88\x02\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x00\x00\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x00\x00\x88\x02\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\x88\x02\x00\x00\x88\x02\x00\x00\x88\x02\x00\x00\x88\x02\x00\x00\x88\x02\x00\x00\x88\x02\x00\x00\xff\xff\xff\xff')
djb.display.add_sprite(tank_l,16,6) # Sprite 13
del tank_l
tank_r = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x88\x02\x88\x02\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x88\x02\x88\x02\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x88\x02\x00\x00\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x88\x02\x00\x00\x88\x02\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x00\x88\x02\x00\x00\x88\x02\x00\x00\x88\x02\x00\x00\x88\x02\x00\x00\x88\x02\x00\x00\x88\x02\xff\xff\xff\xff')
djb.display.add_sprite(tank_r,16,6) # Sprite 14
del tank_r
balloon = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xff\xff\xff\xff\xff\xff\xf8\x03\xf8\x03\xf8\x03\xf8\x03\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xff\xff\xf8\x03\xf8\x03\xf8\x03\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\x00\x7f\x00\x7f\x07\xc1\x07\xc1\x07\xc1\x07\xc1\x07\xc1\x07\xc1\x00\x7f\x00\x7f\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\x00\x7f\x00\x7f\x07\xc1\x07\xc1\x07\xc1\x07\xc1\x07\xc1\x07\xc1\x00\x7f\x00\x7f\xf8\x03\xf8\x03\xf8\x03\xff\xff\xf8\x03\xf8\x03\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\xf8\x03\xf8\x03\xff\xff\xff\xff\xf8\x03\xf8\x03\xf8\x03\xf8\x03\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xff\xff\xff\xff\xff\xff\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xf8\x03\xf8\x03\xf8\x03\xf8\x03\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
djb.display.add_sprite(balloon,16,16) # Sprite 15
del balloon

bgmBuf= [
    [ False,1, 1000,20,500,20],  # Shot Sound
    [ False,1, 2000,50,500,50],
    [ False,1, 1000,50,1000,50]
    ]

class Player():
    def __init__(self):
        #set starting state here
        self.x = WIDTH//2 #150 Position X Jet
        self.y = POS_Y_JET #210 Position Y Jet
        self.height = 14 # Jet Size Height
        self.width = 14 # Jet Size Width
        self.fuel = 1000
        self.sprite = 0 # Start Sprite Jet
        self.isAlive = True
        self.score = 0
                
    def move(self,x,y):
        if self.x + x > 0  and self.x + x < WIDTH - self.width:  #- self.width
            self.x += x
    
    def draw(self):
        djb.display.sprite(self.sprite, self.x, self.y, djb.display.WHITE_H)  #Draw Jet
        
        djb.display.text("Fuel", POS_X_FUEL, POS_Y_FUEL, djb.display.YELLOW_H)
        djb.display.rect(POS_X_FUEL + 36, POS_Y_FUEL + 1,round(25*(self.fuel/1000)),6, djb.display.RED_H, True)
        djb.display.rect(POS_X_FUEL + 35, POS_Y_FUEL,26, 8, djb.display.YELLOW_H)
        djb.display.text("Level:{0}".format(str(game.level)), POS_X_FUEL + 64, POS_Y_FUEL, djb.display.YELLOW_H)
        
        djb.display.text("Score", POS_X_SCORE, 0, djb.display.YELLOW_H)
        djb.display.text(str(self.score), POS_X_SCORE, 8, djb.display.YELLOW_H)
        
        
class Shot():
    def __init__(self, x):
        self.x = x + 7
        self.y = POS_Y_JET #210 Position Y Jet
        self.width = 1
        self.height = 7
    
    def update(self):
        self.y -= BULLET_SPEED
    
    def draw(self):
        djb.display.vline(self.x,self.y, self.height, djb.display.YELLOW_H)

class Target():
    def __init__(self,x,y,width,height,Xmin,Xmax,score):
        self.isAlive = True
        self.isShooter = False
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.Xmin = Xmin
        self.Xmax = Xmax
        self.is_Ally = False
        self.score = score
        
    def should_delete(self):
        return (not self.isAlive) or self.y > HEIGHT
    
    def update(self):
        self.y += MAP_SPEED
    
    def draw(self):
        raise "not implemented" # type: ignore
    
class Bridge(Target):
    def __init__(self,y):
        self.road1 = djb.display.color(140,140,140)
        self.road2 = djb.display.color(180,180,180)
        self.road3 = djb.display.color(255,255,0)
        
        super().__init__((WIDTH//2)-20,y,40,14,0,0,500)
        
    def should_delete(self):
        return self.y > HEIGHT
    
    def draw(self):
        if self.isAlive:
           djb.display.sprite(11, self.x, self.y + 1, djb.display.WHITE_H)

        djb.display.rect(0,self.y,(WIDTH//2)-20,16, self.road1, True)
        djb.display.rect((WIDTH//2)+20,self.y,(WIDTH//2)-20,16, self.road1, True)

        djb.display.rect(0,self.y + 2,(WIDTH//2)-20,12, self.road2, True)
        djb.display.rect((WIDTH//2)+20,self.y + 2,(WIDTH//2)-20,12, self.road2, True)

        djb.display.rect(0,self.y + 7,(WIDTH//2)-20,2, self.road3, True)
        djb.display.rect((WIDTH//2)+20,self.y + 7,(WIDTH//2)-20,2, self.road3, True)
        
        
class Fuel(Target):
    def __init__(self,x,y):
        super().__init__(x,y,16,32,0,0,80)
        self.is_Ally = True
        
    def draw(self):
        djb.display.sprite(8, self.x, self.y, djb.display.BLACK)  #self.x - 4 ?


class Boat(Target):
    def __init__(self,x,y,Xmin,Xmax):
        super().__init__(x,y,32,8,Xmin,Xmax,30)
        self.direction = random.randint(0,1)
        
    def update(self):
        self.y += MAP_SPEED
        if not self.direction:
            self.x -= 1
            if self.x <= self.Xmin:
                self.direction = 1
        else:
            self.x += 1
            if self.x >= self.Xmax - self.width:
                self.direction = 0
        
    def draw(self):
        if not self.direction:
            djb.display.sprite(3, self.x, self.y, djb.display.WHITE_H)
        else:
            djb.display.sprite(4, self.x, self.y, djb.display.WHITE_H)

class Balloon(Target):
    def __init__(self,x,y,Xmin,Xmax):
        super().__init__(x,y,16,16,Xmin,Xmax,20)
        self.direction = random.randint(0,1)
        self.Xmin = x - 5
        self.Xmax = x + self.width + 5
        
    def update(self):
        self.y += MAP_SPEED
        if not self.direction:
            self.x -= 1
            if self.x <= self.Xmin:
                self.direction = 1
        else:
            self.x += 1
            if self.x >= self.Xmax - self.width:
                self.direction = 0
        
    def draw(self):
        #djb.display.rect(self.x, self.y, 16, 16, djb.display.MAGENTA_H, True)
        djb.display.sprite(15, self.x, self.y, djb.display.WHITE_H) #sprite Balloon

class Tank(Target):
    def __init__(self,y,Xmin,Xmax):
        super().__init__(0,y,16,6,Xmin,Xmax,100)
        self.direction = random.randint(0,1)
        if not self.direction:
            self.x = WIDTH
        else:
            self.x = -16
        self.active = False
        self.xs,self.ys,self.ws = 0,0,0
        self.hs = self.ws
        self.shoot_pos = 0
        
    def update(self):
        self.y += MAP_SPEED
        if self.isShooter:
            if self.shoot_pos < 8:
                self.shoot_pos += 1
            else:
                self.shoot_pos = 0  
            return
        if not self.direction:
            self.x -= 1
            if self.x <= self.Xmax:
                self.isShooter = True
        else:
            self.x += 1
            if self.x >= self.Xmin - self.width:
                self.isShooter = True
        
    def draw(self):
        if self.isShooter:
            #print(self.shoot_pos)
            self.xs,self.ys,self.ws = SHOOT_TABLE[self.shoot_pos]
            self.hs = self.ws
            self.ys = self.y + self.ys
            if not self.direction:
                self.xs = self.x + self.xs
            else:
                self.xs = self.x + self.width - self.xs
            if self.shoot_pos == 0:
                djb.play_freq(200,20)
            djb.display.ellipse(self.xs,self.ys,self.ws,self.hs,djb.display.YELLOW_H, True)

        if not self.direction:
            djb.display.sprite(13, self.x, self.y, djb.display.WHITE_H)
        else:
            djb.display.sprite(14, self.x, self.y, djb.display.WHITE_H)
        
class Heli(Target):
    def __init__(self,x,y,Xmin,Xmax):
        super().__init__(x,y,16,9,Xmin,Xmax,60)
        self.direction = random.randint(0,1)
        self.isShooter = random.randint(0,1) #False
        self.ys = self.y + 3
        self.ws = 5
        self.hs = 1
        self.helix = 0
        if not self.direction:
            self.xs = self.x
        else:
            self.xs = self.x + self.width
        
    def update(self):
        self.y += MAP_SPEED
        self.ys = self.y + 3

        if not self.direction:
            self.x -= 1
            if self.isShooter:
                self.xs -= 5
                if self.xs < self.x - 30:
                    djb.play_freq(100,20)
                    self.xs = self.x
            if self.x <= self.Xmin:
                self.direction = 1
                self.xs = self.x + self.width
        else:
            self.x += 1
            if self.isShooter:
                self.xs += 5
                if self.xs > self.x + self.width + 30:
                    djb.play_freq(100,20)
                    self.xs = self.x + self.width
            if self.x >= self.Xmax - self.width:
                self.direction = 0
                self.xs = self.x
        self.helix += 1
        if self.helix >= 6: self.helix = 0
        
    def draw(self):
        if self.isShooter:
            #print(self.xs)
            djb.display.hline(self.xs, self.ys, self.ws, djb.display.YELLOW_H)   
        if not self.direction:
            djb.display.sprite(6, self.x, self.y, djb.display.WHITE_H) #Heli Left
            if self.helix < 3:
                djb.display.sprite(5, self.x-2 , self.y-3, djb.display.WHITE_H)
            else:
                djb.display.sprite(12, self.x-2 , self.y-3, djb.display.WHITE_H)
        else:
            djb.display.sprite(7, self.x, self.y, djb.display.WHITE_H) #Heli Right
            if self.helix < 3:
                djb.display.sprite(5, self.x+4 , self.y-3, djb.display.WHITE_H)
            else:
                djb.display.sprite(12, self.x+4 , self.y-3, djb.display.WHITE_H)
 

class Drone(Target):
    def __init__(self,y):
        super().__init__(0,y,16,6,0,0,100)
        self.direction = random.randint(0,1)
        self.isShooter = random.randint(0,1) #False
        if not self.direction:
            self.x = WIDTH + 10
            self.xs = self.x
        else:
            self.x = -26
            self.xs = self.x + 16
        self.active = False
        self.ys = self.y + 3
        self.ws = 10
        self.hs = 1
        
    def update(self):
        self.y += MAP_SPEED
        self.ys = self.y + 3
        
        if not self.active and self.y > 0 and random.randint(0,20) == 20:
            self.active = True
        elif self.active:
            if not self.direction:
                if self.isShooter:
                    self.xs -= 5
                self.x -= 2
            else:
                if self.isShooter:
                    self.xs += 5
                self.x += 2
        
    def draw(self):
        if self.isShooter:
            #print(self.xs)
            djb.display.hline(self.xs, self.ys, self.ws, djb.display.YELLOW_H)        
        if not self.direction:
            djb.display.sprite(9, self.x, self.y, djb.display.WHITE_H)
        else:
            djb.display.sprite(10, self.x, self.y, djb.display.WHITE_H)

class Game():
    
    def __init__(self):
        self.player = Player()
        self.state = "playing"
        self.SKY_PEN = djb.display.color(72, 180, 224)
        self.TERRAIN_PEN = djb.display.color(16, 140, 16)
        
        self.bullets = []
        self.terrain = []
        self.targets = []
        #
        #  TERRAIN
        #
        self.terrain.append(TERRAINS[2])
        self.terrain.append(TERRAINS[1])
        self.terrain.append(TERRAINS[0])
        self.terrain.append(TERRAINS[2])
        self.terrain.append(TERRAINS[2])
        
        #
        # TERRAIN
        #
        #for level_terrain in range (0,5):
        #    #print(level_terrain,LEVELS[0][level_terrain][0])
        #    self.terrain.append(TERRAINS[LEVELS[0][level_terrain][0]])

        self.targets.append(Heli(60,0,30,130))
        self.targets.append(Balloon(90,20,60,130))
        #self.targets.append(Heli(70,-200,60,160))
        #self.targets.append(Boat(80,-240,60,160))
        
        self.terrain_offset = 0
        self.terrain_number = 5 # 5 x 32 = 160 -32-0-128
        self.new_terrain = False
        self.level = 0
        self.spawn_bridge = False
    
    def check_collision(self,a,b):  # Check collision with target
        return a.x + a.width >= b.x and a.x <= b.x + b.width and a.y + a.height >= b.y and a.y <= b.y + b.height
        #if a.x + a.width >= b.x and a.x <= b.x + b.width and a.y + a.height >= b.y and a.y <= b.y + b.height:
        #    print("Col Target ", a, b)
        #    return True
        #return False
    
    def check_collision_shoot(self,a,b):  # Check collision with target
        return a.xs + a.ws >= b.x and a.xs <= b.x + b.width and a.ys + a.hs >= b.y and a.ys <= b.y + b.height
        #if a.x + a.width >= b.x and a.x <= b.x + b.width and a.y + a.height >= b.y and a.y <= b.y + b.height:
        #    print("Col Target ", a, b)
        #    return True
        #return False
    
    def check_collision_terrain(self):
        #
        # TERRAIN
        #
        
        for y,terrain in enumerate(self.terrain):
            coord_y = HEIGHT-BLOC_SIZE_H - (y*BLOC_SIZE_H) + self.terrain_offset
            #print('Coord_Y ',coord_y)
            
            if(coord_y < (self.player.y + self.player.height) and coord_y > self.player.y):
                for x in range(0,8):
                    #if(terrain & (1 << x)):
                    if(self.terrain[0] & (1 << x)):
                        #print('Check ', x)
                        if self.player.x + self.player.width >      BLOC_SIZE_W*x  and self.player.x < BLOC_SIZE_W*x + BLOC_SIZE_W:
                            self.player.isAlive = False
                            print("Col B Left")
                        #if self.player.x < BLOC_SIZE_W*x + BLOC_SIZE_W:
                        #    self.player.isAlive = False
                        #    print("Col B Left")                            
                        if self.player.x + self.player.width > WIDTH-(BLOC_SIZE_W*x) and self.player.x < WIDTH-(BLOC_SIZE_W*x):
                            self.player.isAlive = False
                            print("Col B Right")
                        #if self.player.x + self.player.width > (WIDTH-BLOC_SIZE_W)-(BLOC_SIZE_W*x):
                        #    self.player.isAlive = False
                        #    print("Col B Right")
        
        if self.terrain_offset <= OFFSET_CHECK_COLLISION: # zone collision en axe Y / position terrain <= 4
            terrain = self.terrain[0]
        else:
            terrain = self.terrain[1]

        for x in range(0,8):
            if(terrain & (1 << x)):
                if self.player.x + self.player.width >      BLOC_SIZE_W*x  and self.player.x < BLOC_SIZE_W*x + BLOC_SIZE_W:
                    self.player.isAlive = False
                    print("Col B Left")
                            
                if self.player.x + self.player.width > (WIDTH-BLOC_SIZE_W)-(BLOC_SIZE_W*x) and self.player.x < WIDTH-(BLOC_SIZE_W*x):
                    self.player.isAlive = False
                    print("Col B Right")
        
    #read controls
    def process_input(self):
        global MAP_SPEED
        djb.scan_jst_btn()
        
        if djb.pressed(djb.btn_Right):
            self.player.move(PLAYER_SPEED, 0)
            self.player.sprite = 2
        elif djb.pressed(djb.btn_Left):
            self.player.move(-PLAYER_SPEED, 0)
            self.player.sprite = 1
        else:
            self.player.sprite = 0
            
        if djb.pressed(djb.btn_A) and len(self.bullets) == 0:
            djb.start_song(bgmBuf[0])
            self.bullets.append(Shot(self.player.x))
            
        if djb.pressed(djb.btn_Up):
            MAP_SPEED = 3
        elif djb.pressed(djb.btn_Down):
            MAP_SPEED = 1
        else:
            MAP_SPEED = 2
           
    def update_terrain(self):
        #print(MAP_SPEED)
        self.terrain_offset += MAP_SPEED
        if(self.terrain_offset >= BLOC_SIZE_H): # Le bloc du bas n'est plus visible, il faut un nouveau au dessus !
            #print('New Terrain')
            self.new_terrain = True
            self.terrain_offset = 0
            self.terrain.pop(0) #retire le bloc et decale la liste
            
            if self.terrain_number % BRIDGE_AFTER_X_BLOC == 0: #it's bridge time after X block
                self.spawn_bridge = True
                self.new_terrain = False
                self.terrain.append(BRIDGE_TERRAIN) # add block "Bridge Terrain"
                
                intersection = ~self.terrain[-2] & ~self.terrain[-1] & 0xff
                match = False
                for i in range(0,7):
                    if intersection & (1 << i) and intersection & (1 << (i + 1)):
                        match = True
                        break
                if not match:
                    self.terrain[-2] = PRE_BRIDGE_TERRAIN
            #
            # TERRAIN
            #
            #else:
            #    if self.level == 4: self.level=0
            #    self.terrain.append(TERRAINS[LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][0]])
            
            #
            # TERRAIN
            #
            elif(random.randint(0,1)): #une chance sur 2 ajoute le meme dernier block terrain
                self.terrain.append(self.terrain[-1])
            else:
                while True:
                    newterrain = TERRAINS[random.randint(0,6)]  # ajoute un block terrain aleatoire parmi la liste
                    intersection = ~newterrain & ~self.terrain[-1] & 0xff # determination de l'intersection entre l'ancien et nouveau block terrain
                    found = False
                    for i in range(0,7):
                        if intersection & (1 << i) and intersection & (1 << (i + 1)): #intersection OK ?
                            self.terrain.append(newterrain)
                            found = True
                            break
                    if found: break
                    
            self.terrain_number += 1

        pass
    
    def spawn_targets(self):
        #print(self.terrain_offset)
        if self.spawn_bridge:
            #print('New Bridge')
            self.spawn_bridge = False
            bridge = Bridge(-(BLOC_SIZE_H//2)-10)  # BLOC_SIZE_H - 8 (demi largeur de la route)? -40
            self.targets.append(bridge)
        elif self.new_terrain:
            #print('New Target')
            self.new_terrain = False
            #get the bounduaries of current tile
            terrain = self.terrain[-1] # -2 avant dernier de la liste. premier bloc superieur (-32,0)

            max_x = WIDTH # bound variable

            for i in range(0,6):
                if terrain & (1 << i):
                    max_x = WIDTH - (i+1) * BLOC_SIZE_W # cote droit : 160 - (nbr de bloc * 10)

            min_x = WIDTH - max_x # inverse cote gauche
            
            bifurcated = (terrain & 0b11000000) > 0  #
            #print(bifurcated)
            
            '''
            #
            # TERRAIN
            #
            if LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][1]:
                if LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][1] == 1: #add a target boat
                    x = LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][2] - 32
                    y = -LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][3]
                    self.targets.append(Boat(x,y,min_x,max_x))
                if LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][1] == 2: #add a target helicopter
                    x = LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][2] - 16
                    y = -LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][3]
                    self.targets.append(Heli(x,y,min_x,max_x))
                if LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][1] == 3: #add a target helicopter shooter
                    x = LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][2] - 16
                    y = -LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][3]
                    self.targets.append(Heli(x,y,min_x,max_x))
                    self.targets[-1].isShooter = True
                if LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][1] == 8: #add a target fuel
                    x = LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][2] - 16
                    y = -LEVELS[self.level][self.terrain_number % BRIDGE_AFTER_X_BLOC][3]
                    self.targets.append(Fuel(x,y))
            '''        
            
            #decide for fuel
            if random.randint(0,SPAWN_PROBABILITY) == 0: # add fuel ?
                if bifurcated:
                    side = random.randint(0,1)
                    if side:
                        min_x = (WIDTH//2)+(3*BLOC_SIZE_W)
                    else:
                        max_x = (WIDTH//2)-(3*BLOC_SIZE_W)
                x = random.randint(min_x, max_x - BLOC_SIZE_W)
                y = random.randint(-32,0) #(-280,-180)
                self.targets.append(Fuel(x,y))
                #print('terrain was',bin(terrain),'fuel is on',x,y)
                
            #decide for enemies + level
            if random.randint(0,SPAWN_PROBABILITY) == 0 and not bifurcated: # add boat ?
                x = random.randint(min_x, max_x - 32)
                y = random.randint(-32,0) #(-280,-180)
                self.targets.append(Boat(x,y,min_x,max_x))
                #print("boat",x,y,min_x,max_x,bin(terrain))
            if random.randint(0,SPAWN_PROBABILITY) == 0: # add helicopter ?
                x = random.randint(min_x,max_x - 16)
                y = random.randint(-32,0) #(-280,-180)
                self.targets.append(Heli(x,y,min_x,max_x))
                #print("heli",x,y,min_x,max_x,bin(terrain))
            if random.randint(0,SPAWN_PROBABILITY) == 0: # add drone ?
                y = random.randint(-32,0) #(-280,-180)
                self.targets.append(Drone(y))
                self.targets[-1].isShooter = random.randint(0,1)
            if random.randint(0,3) == 0: # add tank ?
                y = random.randint(-32,0) #(-280,-180)
                self.targets.append(Tank(y,min_x,max_x))
            if random.randint(0,20) == 0: # add balloon ?
                x = random.randint(min_x,max_x - 16)
                y = random.randint(-32,0) #(-280,-180)
                self.targets.append(Balloon(x,y,min_x,max_x))
                
        pass
    
    def update(self):
        #shoots
        for bullet in self.bullets[:]:
            bullet.update()
            if(bullet.y < 0):
                self.bullets.remove(bullet)
                continue
            for target in self.targets:
                if target.isAlive and self.check_collision(bullet,target):
                    if len(self.bullets): self.bullets.remove(bullet) #Inutile ?
                    if isinstance(target, Bridge): self.level += 1 # Si c'est un pont -> niveau suivant
                    target.isAlive = False
                    self.player.score += target.score
                    djb.start_song(bgmBuf[1])
                    continue
        #terrain
        self.check_collision_terrain()
        self.update_terrain()
        
        #if not isinstance(self.targets[-1], Bridge):
        self.spawn_targets()
        
        #targets
        for target in self.targets[:]:
            if target.should_delete():
                self.targets.remove(target)
                
            target.update()
            
            if target.isAlive and self.check_collision(target,self.player):
                if not target.is_Ally:
                    self.player.isAlive = False
                else:
                    self.player.fuel += 20
                    djb.play_freq(600,5)
                    if self.player.fuel > 1000:
                        self.player.fuel = 1000
                        djb.play_freq(1000,5)
            if target.isShooter:
                if self.check_collision_shoot(target,self.player): #shooted by tank, drone or helicopter ?
                    self.player.isAlive = False

        #fuel
        self.player.fuel -=1
        if self.player.fuel < 200:
            djb.play_tone('C5', 20)
        #game over ?
        if(not self.player.isAlive or self.player.fuel <= 0):
            for radius in range(1,10):
                djb.display.ellipse( self.player.x + 7, self.player.y + 7, radius, radius, djb.display.color_pal[radius], False) # Explosion and Game Over !
            djb.display.show()
            djb.play_tone('C5', 20)
            djb.play_tone('D5', 20)
            djb.play_tone('E5', 20)
            djb.play_tone('F5', 20)
            djb.play_tone('G5', 20)
            djb.play_tone('A5', 20)
            djb.play_tone('B5', 20)
            djb.play_tone('C6', 20)

            self.state = 'gameover'


    def draw_background(self):
        djb.display.fill(self.SKY_PEN) #display.set_pen(self.SKY_PEN)
        
        for y,terrain in enumerate(self.terrain):
            #print('Back ', y, terrain)
            coord_y = HEIGHT-BLOC_SIZE_H - (y * BLOC_SIZE_H) + self.terrain_offset
            for x in range(0,8):
                if(terrain & (1 << x)):
                    djb.display.rect((WIDTH-BLOC_SIZE_W)-(BLOC_SIZE_W*x), coord_y, BLOC_SIZE_W, BLOC_SIZE_H, self.TERRAIN_PEN, True)
                    djb.display.rect(     BLOC_SIZE_W*x , coord_y, BLOC_SIZE_W, BLOC_SIZE_H, self.TERRAIN_PEN, True)
            if(coord_y > 0):
                dif =  abs((terrain & 0b111111) - (self.terrain[y+1] & 0b111111))
                match = terrain & self.terrain[y+1]
                xhign = 0
                xlow = 0
                for x in range(0,6):
                    if   dif & (1 << x): xhign = BLOC_SIZE_W*(x + 1)
                    if match & (1 << x): xlow =  BLOC_SIZE_W*(x + 1)
                
                if((terrain& 0b111111) > (self.terrain[y+1]& 0b111111)):
                    temp = xhign
                    xhign = xlow
                    xlow = temp
                elif((terrain & 0b00111111) == (self.terrain[y+1] & 0b00111111)):
                    xhign = xlow
                    
                #djb.display.poly(  0, coord_y, array.array ('h',[0, coord_y - 11, -1 + xhign, coord_y - 11, -1 + xlow, coord_y]), self.TERRAIN_PEN, True)
                #djb.display.poly(160, coord_y, array.array ('h',[160, coord_y - 11, 160 - xhign, coord_y - 11, 160 - xlow, coord_y]), self.TERRAIN_PEN, True)
                
                #special center slopes
                #if   (not (terrain & 0b11000000) and     (self.terrain[y+1] & 0b11000000)): djb.display.triangle( 60, coord_y - 10, 120,coord_y-10, 160, coord_y, self.TERRAIN_PEN)
                #elif (    (terrain & 0b11000000) and     (self.terrain[y+1] & 0b11000000)): djb.display.fill_rect( 60, coord_y - 10, 40, 10, self.TERRAIN_PEN)
                #elif (    (terrain & 0b11000000) and not (self.terrain[y+1] & 0b11000000)): djb.display.triangle( 60, coord_y, 120, coord_y, 160, coord_y - 10, self.TERRAIN_PEN)
        pass
    
    #draw
    def draw(self):
        self.draw_background()
        for bullet in self.bullets:
            bullet.draw()
        for target in self.targets:
            target.draw()
        self.player.draw()
        #wait 1/60s
    
game = Game()

random.seed(621)

while True:
    if(game.state == "playing"):
        game.process_input()
        game.draw()
        game.update()
        djb.display.show_and_wait() #display.update()
        
    if(game.state == "gameover"):
        djb.display.center_text("GAME OVER", djb.display.WHITE_H)
        djb.display.show_and_wait() #display.update()
        djb.scan_jst_btn ()
        if djb.just_pressed(djb.btn_Start):
            game.__init__()
            
            
    
    
    
